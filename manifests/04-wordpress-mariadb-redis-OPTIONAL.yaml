apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: default
type: Opaque
stringData:
  redis-password: ${REDIS_PWD}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: default
  labels:
    app: redis
spec:
  serviceName: ${REDIS_SERVICE_NAME}
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2
          ports:
            - containerPort: 6379
              name: redis
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: redis-password
          command:
            - redis-server
            - --port
            - "6379"
            - --dir
            - /data
            - --logfile
            - /data/redis.log
            - --appendonly
            - "yes"
            - --requirepass
            - $(REDIS_PASSWORD)
          resources:
            limits:
              memory: 32Gi
            requests:
              cpu: 1
              memory: 16Gi
          volumeMounts:
            - name: redis-data
              mountPath: /data
              subPath: ${REDIS_SUB_PATH}
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: ${STORAGE_PVC}
---
apiVersion: v1
kind: Service
metadata:
  name: ${REDIS_SERVICE_NAME}
  namespace: default
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      name: redis
      targetPort: 6379
  selector:
    app: redis
  clusterIP: None
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: mariadb-secret
  namespace: default
type: Opaque
stringData:
  root-password: "${MARIADB_ROOT_PASSWORD}"
  user-password: "${MARIADB_USER_PASSWORD}"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mariadb
  namespace: default
  labels:
    app: mariadb
spec:
  serviceName: mariadb
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      containers:
        - name: mariadb
          image: mariadb:10.5
          ports:
            - containerPort: 3306
              name: mariadb
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-secret
                  key: root-password
            - name: MYSQL_DATABASE
              value: wordpress_db
            - name: MYSQL_USER
              value: wp_user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-secret
                  key: user-password
          resources:
            limits:
              memory: 32Gi
            requests:
              cpu: 500m
              memory: 4000Mi
          volumeMounts:
            - name: mariadb-data
              mountPath: /var/lib/mysql
              subPath: ${MARIADB_SUBPATH}
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: mariadb-data
          persistentVolumeClaim:
            claimName: ${STORAGE_PVC}
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb
  namespace: default
  labels:
    app: mariadb
spec:
  ports:
    - port: 3306
      name: mariadb
      targetPort: 3306
  selector:
    app: mariadb
  clusterIP: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${WORDPRESS_SERVICE_NAME}
  namespace: default
  labels:
    app: ${WORDPRESS_SERVICE_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${WORDPRESS_SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${WORDPRESS_SERVICE_NAME}
    spec:
      containers:
        - name: wordpress
          image: opencitations/oc_ldd:wp-custom02
          ports:
            - containerPort: 80
              name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mariadb
            - name: WORDPRESS_DB_USER
              value: wp_user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-secret
                  key: user-password
            - name: WORDPRESS_DB_NAME
              value: wordpress_db
            - name: WORDPRESS_CONFIG_EXTRA
              value: |
                define('WP_HOME', '${DOMAIN_WITH_HTTPS}');
                define('WP_SITEURL', '${DOMAIN_WITH_HTTPS}');
          resources:
            requests:
              memory: 16Gi
            limits:
              cpu: 4000m
              memory: 32Gi
          volumeMounts:
            - name: wordpress-data
              mountPath: /var/www/html
              subPath: ${WORDPRESS_SUBPATH}
      volumes:
        - name: wordpress-data
          persistentVolumeClaim:
            claimName: ${STORAGE_PVC}

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: api-redirects
spec:
  redirectRegex:
    regex: .*/(meta|index)/api(.*)
    replacement: https://api.opencitations.net/${1}${2}
    permanent: true

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: api-redirects-new
spec:
  redirectRegex:
    regex: .*/api/v1(.*)
    replacement: https://api.opencitations.net/index/v1${1}
    permanent: true

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: download-redirect
spec:
  redirectRegex:
    regex: .*/download(s)?
    replacement: https://download.opencitations.net
    permanent: true

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: index-ldd-redirects
spec:
  redirectRegex:
    regex: .*/index/ci/(.*)
    replacement: https://ldd.opencitations.net/index/ci/${1}
    permanent: true

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: meta-ldd-redirects
spec:
  redirectRegex:
    regex: .*/meta/(ar|ra|id|br|re)/(.*)
    replacement: https://ldd.opencitations.net/meta/${1}/${2}
    permanent: true

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: oci-redirects
spec:
  redirectRegex:
    regex: .*/oci/(.*)
    replacement: https://ldd.opencitations.net/index/ci/${1}
    permanent: true

---
apiVersion: v1
kind: Service
metadata:
  name: ${WORDPRESS_SERVICE_NAME}
  namespace: default
  labels:
    app: ${WORDPRESS_SERVICE_NAME}
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: ${WORDPRESS_SERVICE_NAME}
  type: ClusterIP
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: ${WORDPRESS_SERVICE_NAME}
  namespace: default
  labels:
    app: ${WORDPRESS_SERVICE_NAME}
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`${WORDPRESS_DOMAIN}`)
      middlewares:
        - name: api-redirects
        - name: oci-redirects
        - name: api-redirects-new
        - name: download-redirect
        - name: index-ldd-redirects
        - name: meta-ldd-redirects
      services:
        - name: varnish-service
          port: 80
  tls:
   certResolver: myresolver

---

apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: ${WORDPRESS_SERVICE_NAME}-http-only
  namespace: default
  labels:
    app: ${WORDPRESS_SERVICE_NAME}
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: Host(`${WORDPRESS_DOMAIN}`)
      middlewares:
        - name: redirect-to-https
        - name: oci-redirects
        - name: api-redirects
        - name: api-redirects-new
        - name: download-redirect
        - name: index-ldd-redirects
        - name: meta-ldd-redirects
      services:
        - name: varnish-service
          port: 80