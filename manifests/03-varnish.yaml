apiVersion: v1
kind: ConfigMap
metadata:
  name: varnish-config
  namespace: default
data:
  default.vcl: |
    vcl 4.0;

    import vsthrottle;
    import std;

    backend wordpress {
        .host = "${WORDPRESS_SERVICE_NAME}.default.svc.cluster.local";
        .port = "80";
    }

    backend sparql {
        .host = "oc-sparql-service.default.svc.cluster.local";
        .first_byte_timeout = 900s;
        .between_bytes_timeout = 900s;
        .port = "80";
    }

    backend search {
        .host = "oc-search-service.default.svc.cluster.local";
        .first_byte_timeout = 900s;
        .between_bytes_timeout = 900s;
        .port = "80";
    }

    backend download {
        .host = "oc-download-service.default.svc.cluster.local";
        .first_byte_timeout = 900s;
        .between_bytes_timeout = 900s;
        .port = "80";
    }

    backend api {
        .host = "oc-api-service.default.svc.cluster.local";
        .first_byte_timeout = 900s;
        .between_bytes_timeout = 900s;
        .port = "80";
    }

    backend ldd {
        .host = "oc-ldd-service.default.svc.cluster.local";
        .first_byte_timeout = 900s;
        .between_bytes_timeout = 900s;
        .port = "80";
    }

    sub rate_limit {
        # Check if host ends with opencitations.net
        if (req.http.host ~ "opencitations\.net$") {
            # Use real IP if available, otherwise fallback to client.ip
            if (req.http.X-Real-IP) {
                # Skip rate limiting for whitelisted IPs
                if (std.ip(req.http.X-Real-IP, "0.0.0.0") ~ whitelist) {
                    return;
                }
                # Apply rate limit using real IP
                if (req.http.User-Agent !~ " StressTestScript/1.0 ${BOTKEY_STRESSTEST}") {
                    if (vsthrottle.is_denied(req.http.X-Real-IP, 280, 60s)) {
                        # Add informative headers before blocking
                        set req.http.X-Rate-Limit-Exceeded = "true";
                        set req.http.X-Rate-Limit = "100";
                        set req.http.X-Rate-Window = "60";
                        return (synth(429, "Too Many Requests"));
                    }
                }
            } else {
                # Fallback to original behavior with client.ip
                # Skip rate limiting for whitelisted IPs
                if (client.ip ~ whitelist) {
                    return;
                }
                # Apply global rate limit per IP
                if (req.http.User-Agent !~ " StressTestScript/1.0 ${BOTKEY_STRESSTEST}") {
                    if (vsthrottle.is_denied(client.ip, 280, 60s)) {
                        # Add informative headers before blocking
                        set req.http.X-Rate-Limit-Exceeded = "true";
                        set req.http.X-Rate-Limit = "100";
                        set req.http.X-Rate-Window = "60";
                        return (synth(429, "Too Many Requests"));
                    }
                }
            }
        }
    }

    # ACL for whitelisted IPs
    acl whitelist {
        # List of whitelisted IPs
        "130.136.130.1";
        "137.204.166.210";
        "10.0.0.0"/8;
        "172.16.0.0"/12;
        "192.168.0.0"/16;
    }

    # Handle incoming requests
    sub vcl_recv {
        # Handle real IP from upstream proxy (Traefik)
        if (req.http.X-Forwarded-For) {
            # Get the first IP from X-Forwarded-For list (the real user IP)
            set req.http.X-Real-IP = regsub(req.http.X-Forwarded-For, ",.*", "");
            # Pass the real IP to the backend
            set req.http.X-Forwarded-For = req.http.X-Real-IP;
        }

        # Handle CORS preflight requests
        if (req.method == "OPTIONS") {
            # Allow all origins for preflight
            set req.http.X-CORS-Preflight = "true";
            return (synth(200, "OK"));
        }

        # Apply rate limiting
        call rate_limit;

        # Route requests to the correct backend
        if (req.http.host == "sparql.opencitations.net") {
            set req.backend_hint = sparql;
            return (pass);
        } elsif (req.http.host == "download.opencitations.net") {
            set req.backend_hint = download;
            return (pass);
        } elsif (req.http.host == "ldd.opencitations.net") {
            set req.backend_hint = ldd;
            return (pass);
        } elsif (req.http.host == "search.opencitations.net") {
            set req.backend_hint = search;
            return (pass); 
        } elsif (req.http.host == "api.opencitations.net") {
            set req.backend_hint = api;
            
            # If Authorization header is present, bypass cache and go directly to backend
            if (req.http.Authorization) {
                return (pass);
            }
            # No Authorization header - allow normal caching behavior
            
        } elsif (req.http.host == "${WORDPRESS_DOMAIN}") {
            set req.backend_hint = wordpress;

            # Check for WordPress authentication and admin cookies
            if (req.http.cookie) {
                # NEVER cache if user is logged in or has admin cookies
                if (
                    req.http.cookie ~ "wordpress_logged_in_" ||
                    req.http.cookie ~ "wordpress_sec_" ||
                    req.http.cookie ~ "wp-settings-" ||
                    req.http.cookie ~ "wp-admin" ||
                    req.http.cookie ~ "comment_author_" ||
                    req.http.cookie ~ "wp-postpass_" ||
                    req.http.cookie ~ "wordpress_test_cookie" ||
                    req.http.cookie ~ "woocommerce_" ||
                    req.http.cookie ~ "wordpressuser_" ||
                    req.http.cookie ~ "wordpresspass_" ||
                    req.http.cookie ~ "wordpress_authenticated"
                ) {
                    # Mark request as intentionally not cached
                    set req.http.X-Cache-Skip = "true";
                    return (pass);
                }

                # For non-authenticated users, remove unnecessary cookies
                set req.http.cookie = regsuball(req.http.cookie, "wp-settings-\d+=[^;]+(; )?", "");
                set req.http.cookie = regsuball(req.http.cookie, "wp-settings-time-\d+=[^;]+(; )?", "");
                if (req.http.cookie == "") {
                    unset req.http.cookie;
                }
            }

            # Bypass cache for wp-admin, wp-login, and POST requests
            if (
                req.url ~ "^/wp-(admin|login)" ||
                req.method == "POST" ||
                req.url ~ "preview=true" ||
                req.url ~ "customize.php" ||
                req.url ~ "/wp-json/" ||
                req.url ~ "xmlrpc.php" ||
                req.url ~ "feed/" ||
                req.url ~ "/wc-api/" ||
                req.url ~ "/my-account/" ||
                req.url ~ "/addons/"
            ) {
                # Mark request as intentionally not cached
                set req.http.X-Cache-Skip = "true";
                return (pass);
            }
        } else {
            return (synth(404, "Not Found"));
        }
        
        # For API calls, ignore User-Agent and X-Device
        if (req.url ~ "/meta/v1/" || req.url ~ "/index/v1/" || req.url ~ "/index/v2/") {
            unset req.http.User-Agent;
            unset req.http.X-Device;
        }
        
        # Handle GET and HEAD requests
        if (req.method == "GET" || req.method == "HEAD") {
            return (hash);
        } else {
            # Mark other requests as intentionally not cached
            set req.http.X-Cache-Skip = "true";
            return (pass);
        }
    }

    # Generate hash key
    sub vcl_hash {
        hash_data(req.url);
        hash_data(req.http.host);
        
        if (!(req.url ~ "/meta/v1/" || req.url ~ "/index/v1/" || req.url ~ "/index/v2/")) {
            hash_data(req.http.X-Device);
        }
        
        return (lookup);
    }

    # Handle backend responses
    sub vcl_backend_response {
        # Handle 4xx and 5xx responses
        if (beresp.status >= 400) {
            set beresp.ttl = 200s;
            set beresp.grace = 0s;
            set beresp.keep = 0s;
            return (deliver);
        }

        # Specific handling for WordPress
        if (bereq.url ~ "^/wp-" && bereq.url !~ "\.(css|js|png|gif|jp(e)?g)") {
            set beresp.ttl = 1h;
            set beresp.grace = 2h;
        }

        # Don't cache WordPress admin pages or search results
        if (bereq.url ~ "^/wp-(admin|login)|preview=true" || bereq.url ~ "/\\?s=") {
            set beresp.uncacheable = true;
            return (deliver);
        }

        # Set TTL for different content types
        if (bereq.url ~ "\.(css|js|png|gif|jp(e)?g|swf|ico)$") {
            set beresp.ttl = 30d;  # Static resources for 30 days
        } elseif (bereq.url ~ "\.(html|woff|woff2|ttf|eot|json)$") {
            set beresp.ttl = 10d;  # Other static files for 10 days
        } elseif (bereq.url ~ "/meta/v1/" || bereq.url ~ "/index/v1/" || bereq.url ~ "/index/v2/") {
            set beresp.ttl = 60d;  # API for 60 days
        } else {
            set beresp.ttl = 1h;   # Dynamic content for 1 hour
        }

        # Remove Set-Cookie for static resources
        if (bereq.url ~ "\.(css|js|png|gif|jp(e)?g|swf|ico)$") {
            unset beresp.http.Set-Cookie;
        }

        return (deliver);
    }

    # Handle backend errors
    sub vcl_backend_error {
        set beresp.http.Content-Type = "text/html; charset=utf-8";
        set beresp.http.Retry-After = "5";
        synthetic({"<!DOCTYPE html>
    <html>
      <head>
        <title>Momentary Service Interruption</title>
        <style>
          body { font-family: Arial, sans-serif; background-color: #f0f0f0; color: #333; text-align: center; padding: 50px; }
          h1 { color: #e74c3c; }
          p { font-size: 18px; }
        </style>
      </head>
      <body>
        <h1>We're Sorry!</h1>
        <p>Our service is currently experiencing some technical difficulties.</p>
        <p>We are working hard to resolve the issue and will be back shortly.</p>
        <p>Error details: "} + beresp.status + " " + beresp.reason + {"</p>
        <p>Please try again in a few moments.</p>
      </body>
    </html>"});
        return (deliver);
    }

    # Deliver responses to client
    sub vcl_deliver {
        # Add CORS headers for API and SPARQL requests
        if (req.http.host == "api.opencitations.net" || req.http.host == "sparql.opencitations.net") {
            # Allow specific origins or all origins
            if (req.http.Origin) {
                set resp.http.Access-Control-Allow-Origin = req.http.Origin;
            } else {
                set resp.http.Access-Control-Allow-Origin = "*";
            }
            set resp.http.Access-Control-Allow-Methods = "GET, POST, OPTIONS";
            set resp.http.Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, Accept";
            set resp.http.Access-Control-Max-Age = "3600";
        }

        # Set X-Cache header based on response type
        if (obj.hits > 0) {
            set resp.http.X-Cache = "HIT";
        } elsif (req.http.X-Cache-Skip) {
            set resp.http.X-Cache = "SKIP";
        } else {
            set resp.http.X-Cache = "MISS";
        }
        
        # Change Server header (Easter egg)
        set resp.http.Server = "Apache/2.4.10 (Win32)";

        # Remove unnecessary headers for clients
        unset resp.http.Via;
        unset resp.http.X-Powered-By;
        # Remove internal skip header
        unset resp.http.X-Cache-Skip;

        # Keep X-Device header if present
        if (req.http.X-Device) {
            set resp.http.X-Device = req.http.X-Device;
        }

        return (deliver);
    }

    # Handle synthetic errors
    sub vcl_synth {
        # Handle CORS preflight responses
        if (req.http.X-CORS-Preflight == "true") {
            set resp.http.Content-Type = "text/plain";
            set resp.http.Access-Control-Allow-Origin = "*";
            set resp.http.Access-Control-Allow-Methods = "GET, POST, OPTIONS";
            set resp.http.Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, Accept";
            set resp.http.Access-Control-Max-Age = "3600";
            set resp.body = "";
            return (deliver);
        }

        set resp.http.Content-Type = "text/html; charset=utf-8";
        
        if (resp.status == 429) {
            set resp.status = 429;
            set resp.reason = "Too Many Requests";
            set resp.body = {"<!DOCTYPE html>
                            <html lang="en">
                            <head>
                                <meta charset="UTF-8">
                                <title>API Rate Limit Exceeded</title>
                                <style>
                                    body {
                                        font-family: Arial, sans-serif;
                                        background-color: #f8f9fa;
                                        color: #333;
                                        text-align: center;
                                        padding: 50px;
                                    }
                                    h1 {
                                        color: #dc3545;
                                        font-size: 36px;
                                        margin-bottom: 20px;
                                    }
                                    p {
                                        font-size: 18px;
                                        margin-bottom: 10px;
                                    }
                                    .container {
                                        max-width: 600px;
                                        margin: 0 auto;
                                        background-color: #fff;
                                        padding: 40px;
                                        border-radius: 5px;
                                        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                                    }
                                    .icon {
                                        font-size: 60px;
                                        color: #dc3545;
                                        margin-bottom: 20px;
                                    }
                                    .btn {
                                        display: inline-block;
                                        background-color: #007bff;
                                        color: #fff;
                                        padding: 10px 20px;
                                        text-decoration: none;
                                        border-radius: 5px;
                                        margin-top: 20px;
                                        transition: background-color 0.3s;
                                    }
                                    .btn:hover {
                                        background-color: #0056b3;
                                    }
                                </style>
                            </head>
                            <body>
                                <div class="container">
                                    <div class="icon">&#9888;</div>
                                    <h1>API Rate Limit Exceeded</h1>
                                    <p>We're sorry, but you have exceeded the allowed number of API requests.</p>
                                    <p>Our API is limited to 200 requests per minute for all users.</p>
                                    <p>Please wait a few seconds before making additional requests.</p>
                                    <a href="/" class="btn">Return to Homepage</a>
                                </div>
                            </body>
                            </html>"};
            return (deliver);
        } else {
            synthetic("Too Many Requests");
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: varnish
 namespace: default
 labels:
   app: varnish
spec:
 replicas: 2
 revisionHistoryLimit: 30
 progressDeadlineSeconds: 600
 selector:
   matchLabels:
     app: varnish
 strategy:
   type: RollingUpdate
 template:
   metadata:
     labels:
       app: varnish 
   spec:
     containers:
       - name: varnish
         image: varnish:7.6.0
         imagePullPolicy: Always
         securityContext:
           capabilities:
             add: ["IPC_LOCK"]
         args:
           - varnishd
           - '-F'
           - '-a'
           - ':80'
           - '-f'
           - /etc/varnish/default.vcl
           - '-s'
           - malloc,8g
         ports:
           - containerPort: 80
             protocol: TCP
         resources:
           limits:
             memory: 10Gi
           requests:
             memory: 10Gi
         volumeMounts:
           - name: varnish-config
             mountPath: /etc/varnish
     volumes:
       - name: varnish-config
         configMap:
           name: varnish-config
           defaultMode: 420

---
apiVersion: v1
kind: Service
metadata:
  name: varnish-service
  namespace: default
  labels:
    app: varnish
spec:
  selector:
    app: varnish
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  type: ClusterIP

---

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-to-https
  namespace: default
spec:
  redirectScheme:
    scheme: https
    permanent: true
    port: "443"