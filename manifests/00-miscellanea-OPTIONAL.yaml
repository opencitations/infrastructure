#traefik crontab
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: traefik-logrotate-simple
  namespace: default
spec:
  # Run at 1:00 AM on the first day of every month
  schedule: "0 1 1 * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: logrotate
            image: alpine:latest
            command:
            - /bin/sh
            - -c
            - |
              # Simple rotation script
              cd /var/log/traefik
              
              # Get previous month's year and month
              if [ "$(date +%m)" = "01" ]; then
                # If we're in January, previous month is December of last year
                YEAR=$(($(date +%Y) - 1))
                MONTH="12"
              else
                YEAR=$(date +%Y)
                MONTH=$(printf "%02d" $(($(date +%m) - 1)))
              fi
              
              # If access log exists and is not empty, copy it
              if [ -f "traefik-access.log" ] && [ -s "traefik-access.log" ]; then
                cp traefik-access.log "oc-${YEAR}-${MONTH}.log"
                
                # Empty the original file instead of removing it
                # This avoids issues if Traefik has the file open
                > traefik-access.log
                
                echo "Log rotated: oc-${YEAR}-${MONTH}.log"
              else
                echo "No logs to rotate"
              fi
              
              # Optional: remove logs older than 5 years (1825 days)
              find /var/log/traefik -name "oc-*.log" -mtime +1825 -delete
            volumeMounts:
            - name: logs
              mountPath: /var/log/traefik
              subPath: traefik
          restartPolicy: OnFailure
          volumes:
          - name: logs
            persistentVolumeClaim:
              claimName: nfs-log-dir-claim


---
# Varnish warmup script for Wordpress
apiVersion: v1
kind: ConfigMap
metadata:
  name: varnish-warmup-script
data:
  varnish-cache-warmer.sh: |
    #!/bin/bash
    VERSION='1.0.0'
    USER_AGENT="VarnishCacheWarmer"

    warm_varnish() {
        echo "Warming cache for $1"
        for i in {1..5}; do
          curl -sL -A "$USER_AGENT" http://$1/sitemap.xml | egrep -o "http(s?)://$1[^ \"\'()\<>]+" | while read line; do
              if [[ $line == *.xml ]]
              then
                  newURL=$line
                  curl -sL -A "$USER_AGENT" $newURL | egrep -o "http(s?)://$1[^ \"\'()\<>]+" | while read newline; do
                      time curl -sL -A "$USER_AGENT" -sL -w "%{http_code} %{url_effective}\n" $newline -o /dev/null 2>&1
                      echo $newline
                      sleep 2
                  done
              else
                  time curl -sL -A "$USER_AGENT" -sL -w "%{http_code} %{url_effective}\n" $line -o /dev/null 2>&1
                  echo $line
                  sleep 2
              fi
              sleep 2
          done
        done
        echo "Done warming cache for $1"
    }

    for host in "$@"; do
        warm_varnish $host
    done
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: wp-varnish-warmup
spec:
  schedule: "0 * * * *" # every hour
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: wordpress-varnish-warmup
              image: alpine:latest
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  apk add --no-cache bash curl grep && \
                  cp /scripts/varnish-cache-warmer.sh /tmp/warmer.sh && \
                  chmod +x /tmp/warmer.sh && \
                  bash /tmp/warmer.sh opencitations.net
              volumeMounts:
                - name: script-volume
                  mountPath: /scripts
          restartPolicy: OnFailure
          volumes:
            - name: script-volume
              configMap:
                name: varnish-warmup-script
# END varnish warmup script for Wordpress